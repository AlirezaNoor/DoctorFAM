// <auto-generated />
using System;
using DoctorFAM.Data.DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DoctorFAM.Data.Migrations
{
    [DbContext(typeof(DoctorFAMDbContext))]
    [Migration("20221203053818_Initial-Resume-Table")]
    partial class InitialResumeTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Academy.Domain.Entities.SiteSetting.SiteSetting", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<int>("BloodPressureMeasurement")
                        .HasColumnType("int");

                    b.Property<string>("CopyRightText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DeathCertificateTariff")
                        .HasColumnType("int");

                    b.Property<int>("DermalOrSubcutaneousInjection")
                        .HasColumnType("int");

                    b.Property<int>("DistanceFromCityTarriff")
                        .HasColumnType("int");

                    b.Property<int>("ECG")
                        .HasColumnType("int");

                    b.Property<int>("GastricIntubation")
                        .HasColumnType("int");

                    b.Property<int>("Glucometry")
                        .HasColumnType("int");

                    b.Property<int>("GreatDressing")
                        .HasColumnType("int");

                    b.Property<int>("HomeLaboratoryTariff")
                        .HasColumnType("int");

                    b.Property<int>("HomeNurseTariff")
                        .HasColumnType("int");

                    b.Property<int>("HomePatientTransportTariff")
                        .HasColumnType("int");

                    b.Property<int>("HomePharmacyTariff")
                        .HasColumnType("int");

                    b.Property<int>("HomeVisitTariff")
                        .HasColumnType("int");

                    b.Property<int>("IntramuscularInjection")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("OnlineVisitTariff")
                        .HasColumnType("int");

                    b.Property<int>("OxygenTherapy")
                        .HasColumnType("int");

                    b.Property<int>("PulseOximetry")
                        .HasColumnType("int");

                    b.Property<int>("ReedyInjection")
                        .HasColumnType("int");

                    b.Property<int>("ReservationTarrif")
                        .HasColumnType("int");

                    b.Property<int>("SendSMSTimer")
                        .HasColumnType("int");

                    b.Property<int>("SerumTherapy")
                        .HasColumnType("int");

                    b.Property<string>("SiteDomain")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SmallDressing")
                        .HasColumnType("int");

                    b.Property<int>("UrinaryBladder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SiteSettings");
                });

            modelBuilder.Entity("DoctorFAM.DataLayer.Entities.Request", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<decimal>("BusinessKey")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<decimal?>("OperationId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal?>("PatientId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<int>("RequestState")
                        .HasColumnType("int");

                    b.Property<int>("RequestType")
                        .HasColumnType("int");

                    b.Property<decimal>("UserId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("OperationId");

                    b.HasIndex("UserId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.Account.Role", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<decimal?>("ParentId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("RoleUniqueName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1m,
                            CreateDate = new DateTime(2022, 12, 3, 9, 8, 17, 334, DateTimeKind.Local).AddTicks(4023),
                            IsDelete = false,
                            RoleUniqueName = "Admin",
                            Title = "Admin"
                        },
                        new
                        {
                            Id = 2m,
                            CreateDate = new DateTime(2022, 12, 3, 9, 8, 17, 334, DateTimeKind.Local).AddTicks(4039),
                            IsDelete = false,
                            RoleUniqueName = "Doctor",
                            Title = "Doctor"
                        },
                        new
                        {
                            Id = 3m,
                            CreateDate = new DateTime(2022, 12, 3, 9, 8, 17, 334, DateTimeKind.Local).AddTicks(4050),
                            IsDelete = false,
                            RoleUniqueName = "Support",
                            Title = "Support"
                        },
                        new
                        {
                            Id = 4m,
                            CreateDate = new DateTime(2022, 12, 3, 9, 8, 17, 334, DateTimeKind.Local).AddTicks(4060),
                            IsDelete = false,
                            RoleUniqueName = "Seller",
                            Title = "Seller"
                        },
                        new
                        {
                            Id = 5m,
                            CreateDate = new DateTime(2022, 12, 3, 9, 8, 17, 334, DateTimeKind.Local).AddTicks(4071),
                            IsDelete = false,
                            RoleUniqueName = "DoctorOfficeEmployee",
                            Title = "DoctorOfficeEmployee"
                        },
                        new
                        {
                            Id = 6m,
                            CreateDate = new DateTime(2022, 12, 3, 9, 8, 17, 334, DateTimeKind.Local).AddTicks(4084),
                            IsDelete = false,
                            RoleUniqueName = "Pharmacy",
                            Title = "Pharmacy"
                        },
                        new
                        {
                            Id = 7m,
                            CreateDate = new DateTime(2022, 12, 3, 9, 8, 17, 334, DateTimeKind.Local).AddTicks(4095),
                            IsDelete = false,
                            ParentId = 3m,
                            RoleUniqueName = "HomeVisit",
                            Title = "HomeVisit"
                        },
                        new
                        {
                            Id = 8m,
                            CreateDate = new DateTime(2022, 12, 3, 9, 8, 17, 334, DateTimeKind.Local).AddTicks(4106),
                            IsDelete = false,
                            ParentId = 3m,
                            RoleUniqueName = "HomeNurse",
                            Title = "HomeNurse"
                        },
                        new
                        {
                            Id = 9m,
                            CreateDate = new DateTime(2022, 12, 3, 9, 8, 17, 334, DateTimeKind.Local).AddTicks(4117),
                            IsDelete = false,
                            ParentId = 3m,
                            RoleUniqueName = "HomePharmacy",
                            Title = "HomePharmacy"
                        },
                        new
                        {
                            Id = 10m,
                            CreateDate = new DateTime(2022, 12, 3, 9, 8, 17, 334, DateTimeKind.Local).AddTicks(4129),
                            IsDelete = false,
                            ParentId = 3m,
                            RoleUniqueName = "HomeLabratory",
                            Title = "HomeLabratory"
                        },
                        new
                        {
                            Id = 11m,
                            CreateDate = new DateTime(2022, 12, 3, 9, 8, 17, 334, DateTimeKind.Local).AddTicks(4140),
                            IsDelete = false,
                            ParentId = 3m,
                            RoleUniqueName = "HomePatientTransport",
                            Title = "HomePatientTransport"
                        },
                        new
                        {
                            Id = 12m,
                            CreateDate = new DateTime(2022, 12, 3, 9, 8, 17, 334, DateTimeKind.Local).AddTicks(4150),
                            IsDelete = false,
                            ParentId = 3m,
                            RoleUniqueName = "DeathCertificate",
                            Title = "DeathCertificate"
                        },
                        new
                        {
                            Id = 13m,
                            CreateDate = new DateTime(2022, 12, 3, 9, 8, 17, 334, DateTimeKind.Local).AddTicks(4161),
                            IsDelete = false,
                            ParentId = 3m,
                            RoleUniqueName = "OnlineVisit",
                            Title = "OnlineVisit"
                        },
                        new
                        {
                            Id = 14m,
                            CreateDate = new DateTime(2022, 12, 3, 9, 8, 17, 334, DateTimeKind.Local).AddTicks(4171),
                            IsDelete = false,
                            RoleUniqueName = "Nurse",
                            Title = "Nurse"
                        },
                        new
                        {
                            Id = 15m,
                            CreateDate = new DateTime(2022, 12, 3, 9, 8, 17, 334, DateTimeKind.Local).AddTicks(4182),
                            IsDelete = false,
                            RoleUniqueName = "Consultant",
                            Title = "Consultant"
                        },
                        new
                        {
                            Id = 16m,
                            CreateDate = new DateTime(2022, 12, 3, 9, 8, 17, 334, DateTimeKind.Local).AddTicks(4193),
                            IsDelete = false,
                            RoleUniqueName = "Labratory",
                            Title = "Labratory"
                        },
                        new
                        {
                            Id = 17m,
                            CreateDate = new DateTime(2022, 12, 3, 9, 8, 17, 334, DateTimeKind.Local).AddTicks(4203),
                            IsDelete = false,
                            RoleUniqueName = "LaboratoryOfficeEmployee",
                            Title = "LaboratoryOfficeEmployee"
                        },
                        new
                        {
                            Id = 18m,
                            CreateDate = new DateTime(2022, 12, 3, 9, 8, 17, 334, DateTimeKind.Local).AddTicks(4283),
                            IsDelete = false,
                            ParentId = 17m,
                            RoleUniqueName = "LaboratorySampler",
                            Title = "نمونه گیر"
                        });
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.Account.RolePermission", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<decimal>("PermissionId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("RoleId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.Account.User", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<string>("Avatar")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("BanForComment")
                        .HasColumnType("bit");

                    b.Property<bool>("BanForTicket")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("BithDay")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("EmailActivationCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ExpireMobileSMSDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExtraPhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FatherName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomePhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBan")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEmailConfirm")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMobileConfirm")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("MobileActivationCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NationalId")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("WalletBalance")
                        .HasColumnType("int");

                    b.Property<string>("WorkAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.Account.UserRole", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<decimal>("RoleId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("UserId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.BMI.BMI", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<int>("BMIResult")
                        .HasColumnType("int");

                    b.Property<int>("BMIResultState")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<decimal?>("UserId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("BMI");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.BMI.GFR", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("GFRResult")
                        .HasColumnType("int");

                    b.Property<int>("GFRtResultState")
                        .HasColumnType("int");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("Keratenin")
                        .HasColumnType("int");

                    b.Property<decimal?>("UserId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("GFR");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.Consultant.Consultant", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<decimal>("UserId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("consultant");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.Consultant.ConsultantInfo", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<decimal>("ConsultantId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Education")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ConsultantId")
                        .IsUnique();

                    b.ToTable("ConsultantInfos");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.Consultant.UserSelectedConsultant", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<decimal>("ConsultantId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<int>("ConsultantRequestState")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<decimal>("PatientId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("RejectDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ConsultantId");

                    b.HasIndex("PatientId");

                    b.ToTable("UserSelectedConsultants");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.Contact.Ticket", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<bool>("ConsultantRequest")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReadByAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReadByOwner")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReadByTargetUser")
                        .HasColumnType("bit");

                    b.Property<bool>("OnWorking")
                        .HasColumnType("bit");

                    b.Property<bool>("OnlineVisitRequest")
                        .HasColumnType("bit");

                    b.Property<decimal>("OwnerId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal?>("RequesConsultanttId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal?>("RequestId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("TargetUserId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool>("TicketForAdminAndSupporters")
                        .HasColumnType("bit");

                    b.Property<int>("TicketSenderType")
                        .HasColumnType("int");

                    b.Property<int>("TicketStatus")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("TargetUserId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.Contact.TicketMessage", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MessageFile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("SenderId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("TicketId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("SenderId");

                    b.HasIndex("TicketId");

                    b.ToTable("TicketMessages");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.CooperationRequest.CooperationRequest", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("FollowedUp")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CooperationRequests");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.DoctorReservation.DoctorPersonalBooking", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DoctorReservationDateTimeId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorReservationDateTimeId")
                        .IsUnique();

                    b.ToTable("DoctorPersonalBooking");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.DoctorReservation.DoctorReservationDate", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("UserId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("DoctorReservationDates");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.DoctorReservation.DoctorReservationDateTime", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("DoctorBooking")
                        .HasColumnType("bit");

                    b.Property<decimal>("DoctorReservationDateId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<int>("DoctorReservationState")
                        .HasColumnType("int");

                    b.Property<int?>("DoctorReservationType")
                        .HasColumnType("int");

                    b.Property<string>("EndTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<decimal?>("PatientId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("StartTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("WorkAddressId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorReservationDateId");

                    b.HasIndex("PatientId");

                    b.HasIndex("WorkAddressId");

                    b.ToTable("DoctorReservationDateTimes");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.DoctorReservation.LogForCloseReservation", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DoctorReservationDateTimeId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<decimal>("UserId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorReservationDateTimeId");

                    b.HasIndex("UserId");

                    b.ToTable("LogForCloseReservations");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.DoctorReservation.ReservationDateCancelation", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DoctorReservationDateId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("DoctorReservationDateId");

                    b.ToTable("ReservationDateCancelations");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.DoctorReservation.ReservationDateTimeCancelation", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DoctorReservationDateTimeId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<decimal>("ReservationDateCancelationId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorReservationDateTimeId")
                        .IsUnique();

                    b.HasIndex("ReservationDateCancelationId");

                    b.ToTable("ReservationDateTimeCancelations");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.Doctors.Doctor", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<decimal>("UserId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.Doctors.DoctorsInfo", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<string>("ClinicPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DoctorId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("Education")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("GeneralPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("MediacalFile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalSystemCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specialty")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId")
                        .IsUnique();

                    b.ToTable("DoctorsInfos");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.Doctors.DoctorsSelectedInterests", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DoctorId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("InterestId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("InterestId");

                    b.ToTable("DoctorsSelectedInterests");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.Doctors.DoctorsSkils", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DoctorId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("DoctorSkil")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("DoctorSkill");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.FamilyDoctor.ParsaSystem.LogForSendSMSToUsersIncomeFromParsa", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DoctorUserId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<decimal>("ParsaUserId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("SMSBody")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LogForSendSMSToUsersIncomeFromParsa");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.FamilyDoctor.ParsaSystem.UserInsertedFromParsaSystem", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DoctorUserId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool>("HasAnyFamilyDoctor")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRegisteredUser")
                        .HasColumnType("bit");

                    b.Property<string>("PatientFirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientLastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientMobile")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PatientNationalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SMSSent")
                        .HasColumnType("bit");

                    b.Property<DateTime>("SMSSentDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("ShowInDashboard")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("DoctorUserId");

                    b.ToTable("UserInsertedFromParsaSystems");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.FamilyDoctor.UserSelectedFamilyDoctor", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DoctorId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<int>("FamilyDoctorRequestState")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<decimal>("PatientId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("RejectDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("UserSelectedFamilyDoctor");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.FamilyDoctor.VIPSystem.DoctorsLabelsForVIPInsertedDoctor", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DoctorUserId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("LabelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DoctorsLabelsForVIPInsertedDoctor");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.FamilyDoctor.VIPSystem.LabelOfVIPDoctorInsertedPatient", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DoctorsLabelsForVIPInsertedDoctorId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<decimal>("VIPUserInsertedFromDoctorSystemId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorsLabelsForVIPInsertedDoctorId");

                    b.HasIndex("VIPUserInsertedFromDoctorSystemId");

                    b.ToTable("LabelOfVIPDoctorInsertedPatient");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.FamilyDoctor.VIPSystem.LogForSendSMSToVIPUsersIncomeFromDoctorSystem", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("SMSBody")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("VIPUserInsertedFromDoctorSystemId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.ToTable("LogForSendSMSToVIPUsersIncomeFromDoctorSystem");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.FamilyDoctor.VIPSystem.VIPUserInsertedFromDoctorSystem", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DoctorUserId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("PatientFirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientLastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientMobile")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PatientNationalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SMSSent")
                        .HasColumnType("bit");

                    b.Property<DateTime>("SMSSentDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("VIPUserInsertedFromDoctorSystem");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.HealthInformation.HealthInformation", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("File")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HealtInformationFileState")
                        .HasColumnType("int");

                    b.Property<int>("HealthInformationType")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<decimal?>("OwnerId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("RejectNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ShowInDoctorPanel")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowInSite")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowInfinity")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("longDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("HealthInformation");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.HealthInformation.HealthInformationTag", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("HealthInformationId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("TagTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HealthInformationId");

                    b.ToTable("HealthInformationTags");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.HealthInformation.RadioFAMCategory", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<decimal?>("ParentId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("UniqueName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("RadioFAMCategories");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.HealthInformation.RadioFAMCategoryInfo", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("LanguageId")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("RadioFAMCategoryId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(260)
                        .HasColumnType("nvarchar(260)");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("RadioFAMCategoryId");

                    b.ToTable("RadioFAMCategoryInfos");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.HealthInformation.RadioFAMSelectedCategory", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("HealthInformationId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<decimal>("RadioFAMCategoryId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("HealthInformationId");

                    b.HasIndex("RadioFAMCategoryId");

                    b.ToTable("RadioFAMSelectedCategories");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.HealthInformation.TVFAMCategory", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<decimal?>("ParentId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("UniqueName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("TVFAMCategories");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.HealthInformation.TVFAMCategoryInfo", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("LanguageId")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("TVFAMCategoryId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(260)
                        .HasColumnType("nvarchar(260)");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("TVFAMCategoryId");

                    b.ToTable("TVFAMCategoryInfos");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.HealthInformation.TVFAMSelectedCategory", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("HealthInformationId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<decimal>("TVFAMCategoryId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("HealthInformationId");

                    b.HasIndex("TVFAMCategoryId");

                    b.ToTable("TVFAMSelectedCategories");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.Interest.DoctorsInterest", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Interests");

                    b.HasData(
                        new
                        {
                            Id = 1m,
                            CreateDate = new DateTime(2022, 12, 3, 9, 8, 17, 334, DateTimeKind.Local).AddTicks(5204),
                            IsDelete = false
                        },
                        new
                        {
                            Id = 2m,
                            CreateDate = new DateTime(2022, 12, 3, 9, 8, 17, 334, DateTimeKind.Local).AddTicks(5218),
                            IsDelete = false
                        },
                        new
                        {
                            Id = 3m,
                            CreateDate = new DateTime(2022, 12, 3, 9, 8, 17, 334, DateTimeKind.Local).AddTicks(5229),
                            IsDelete = false
                        },
                        new
                        {
                            Id = 4m,
                            CreateDate = new DateTime(2022, 12, 3, 9, 8, 17, 334, DateTimeKind.Local).AddTicks(5239),
                            IsDelete = false
                        });
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.Interest.DoctorsInterestInfo", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("InterestId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("LanguageId")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("InterestId");

                    b.HasIndex("LanguageId");

                    b.ToTable("InterestInfos");

                    b.HasData(
                        new
                        {
                            Id = 1m,
                            CreateDate = new DateTime(2022, 12, 3, 9, 8, 17, 334, DateTimeKind.Local).AddTicks(5253),
                            InterestId = 1m,
                            IsDelete = false,
                            LanguageId = "fa-IR",
                            Title = "ویزیت آنلاین"
                        },
                        new
                        {
                            Id = 2m,
                            CreateDate = new DateTime(2022, 12, 3, 9, 8, 17, 334, DateTimeKind.Local).AddTicks(5265),
                            InterestId = 1m,
                            IsDelete = false,
                            LanguageId = "en-US",
                            Title = "Online Visit"
                        },
                        new
                        {
                            Id = 3m,
                            CreateDate = new DateTime(2022, 12, 3, 9, 8, 17, 334, DateTimeKind.Local).AddTicks(5276),
                            InterestId = 1m,
                            IsDelete = false,
                            LanguageId = "tr-TR",
                            Title = "çevrimiçi ziyaret"
                        },
                        new
                        {
                            Id = 4m,
                            CreateDate = new DateTime(2022, 12, 3, 9, 8, 17, 334, DateTimeKind.Local).AddTicks(5286),
                            InterestId = 1m,
                            IsDelete = false,
                            LanguageId = "ar-SA",
                            Title = "زيارة عبر الإنترنت"
                        },
                        new
                        {
                            Id = 5m,
                            CreateDate = new DateTime(2022, 12, 3, 9, 8, 17, 334, DateTimeKind.Local).AddTicks(5296),
                            InterestId = 2m,
                            IsDelete = false,
                            LanguageId = "ar-SA",
                            Title = "زيارة منزلية"
                        },
                        new
                        {
                            Id = 6m,
                            CreateDate = new DateTime(2022, 12, 3, 9, 8, 17, 334, DateTimeKind.Local).AddTicks(5308),
                            InterestId = 2m,
                            IsDelete = false,
                            LanguageId = "tr-TR",
                            Title = "Ev ziyareti"
                        },
                        new
                        {
                            Id = 7m,
                            CreateDate = new DateTime(2022, 12, 3, 9, 8, 17, 334, DateTimeKind.Local).AddTicks(5318),
                            InterestId = 2m,
                            IsDelete = false,
                            LanguageId = "fa-IR",
                            Title = "ویزیت در منزل"
                        },
                        new
                        {
                            Id = 8m,
                            CreateDate = new DateTime(2022, 12, 3, 9, 8, 17, 334, DateTimeKind.Local).AddTicks(5329),
                            InterestId = 2m,
                            IsDelete = false,
                            LanguageId = "en-US",
                            Title = "Home Visit"
                        },
                        new
                        {
                            Id = 9m,
                            CreateDate = new DateTime(2022, 12, 3, 9, 8, 17, 334, DateTimeKind.Local).AddTicks(5339),
                            InterestId = 3m,
                            IsDelete = false,
                            LanguageId = "en-US",
                            Title = "Family Doctor"
                        },
                        new
                        {
                            Id = 10m,
                            CreateDate = new DateTime(2022, 12, 3, 9, 8, 17, 334, DateTimeKind.Local).AddTicks(5351),
                            InterestId = 3m,
                            IsDelete = false,
                            LanguageId = "tr-TR",
                            Title = "aile hekimliği"
                        },
                        new
                        {
                            Id = 11m,
                            CreateDate = new DateTime(2022, 12, 3, 9, 8, 17, 334, DateTimeKind.Local).AddTicks(5362),
                            InterestId = 3m,
                            IsDelete = false,
                            LanguageId = "ar-SA",
                            Title = "أطباء الأسرة"
                        },
                        new
                        {
                            Id = 12m,
                            CreateDate = new DateTime(2022, 12, 3, 9, 8, 17, 334, DateTimeKind.Local).AddTicks(5372),
                            InterestId = 3m,
                            IsDelete = false,
                            LanguageId = "fa-IR",
                            Title = "پزشک خانواده"
                        },
                        new
                        {
                            Id = 13m,
                            CreateDate = new DateTime(2022, 12, 3, 9, 8, 17, 334, DateTimeKind.Local).AddTicks(5382),
                            InterestId = 4m,
                            IsDelete = false,
                            LanguageId = "fa-IR",
                            Title = "صدور گواهی فوت"
                        },
                        new
                        {
                            Id = 14m,
                            CreateDate = new DateTime(2022, 12, 3, 9, 8, 17, 334, DateTimeKind.Local).AddTicks(5392),
                            InterestId = 4m,
                            IsDelete = false,
                            LanguageId = "en-US",
                            Title = "Issuance of death certificate"
                        },
                        new
                        {
                            Id = 15m,
                            CreateDate = new DateTime(2022, 12, 3, 9, 8, 17, 334, DateTimeKind.Local).AddTicks(5403),
                            InterestId = 4m,
                            IsDelete = false,
                            LanguageId = "tr-TR",
                            Title = "Ölüm belgesi verilmesi"
                        },
                        new
                        {
                            Id = 16m,
                            CreateDate = new DateTime(2022, 12, 3, 9, 8, 17, 334, DateTimeKind.Local).AddTicks(5413),
                            InterestId = 4m,
                            IsDelete = false,
                            LanguageId = "ar-SA",
                            Title = "اصدار شهادة وفاة"
                        });
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.Interest.PharmacyInterestInfo", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("InterestId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("LanguageId")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("InterestId");

                    b.HasIndex("LanguageId");

                    b.ToTable("PharmacyInterestInfos");

                    b.HasData(
                        new
                        {
                            Id = 1m,
                            CreateDate = new DateTime(2022, 12, 3, 9, 8, 17, 334, DateTimeKind.Local).AddTicks(5446),
                            InterestId = 1m,
                            IsDelete = false,
                            LanguageId = "fa-IR",
                            Title = "داروخانه در منزل"
                        },
                        new
                        {
                            Id = 2m,
                            CreateDate = new DateTime(2022, 12, 3, 9, 8, 17, 334, DateTimeKind.Local).AddTicks(5459),
                            InterestId = 1m,
                            IsDelete = false,
                            LanguageId = "tr-TR",
                            Title = "evde eczane"
                        },
                        new
                        {
                            Id = 3m,
                            CreateDate = new DateTime(2022, 12, 3, 9, 8, 17, 334, DateTimeKind.Local).AddTicks(5471),
                            InterestId = 1m,
                            IsDelete = false,
                            LanguageId = "ar-SA",
                            Title = "صيدلية في المنزل"
                        },
                        new
                        {
                            Id = 4m,
                            CreateDate = new DateTime(2022, 12, 3, 9, 8, 17, 334, DateTimeKind.Local).AddTicks(5482),
                            InterestId = 1m,
                            IsDelete = false,
                            LanguageId = "en-US",
                            Title = "Pharmacy at home"
                        });
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.Interest.PharmacyInterests", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("PharmacyInterests");

                    b.HasData(
                        new
                        {
                            Id = 1m,
                            CreateDate = new DateTime(2022, 12, 3, 9, 8, 17, 334, DateTimeKind.Local).AddTicks(5431),
                            IsDelete = false
                        });
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.Laboratory.HomeLaboratoryRequestDetail", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExperimentImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExperimentName")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("ExperimentPrescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExperimentTrakingCode")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<decimal>("RequestId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("RequestId");

                    b.ToTable("HomeLaboratoryRequestDetails");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.Laboratory.Laboratory", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<decimal>("UserId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Laboratory");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.Laboratory.LaboratoryInfo", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Education")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<decimal>("LaboratoryId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LaboratoryId")
                        .IsUnique();

                    b.ToTable("LaboratoryInfos");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.Languages.Language", b =>
                {
                    b.Property<string>("SystemName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("SystemName");

                    b.ToTable("languages");

                    b.HasData(
                        new
                        {
                            SystemName = "en-US",
                            IsActive = true,
                            Title = "English"
                        },
                        new
                        {
                            SystemName = "fa-IR",
                            IsActive = true,
                            Title = "فارسی"
                        },
                        new
                        {
                            SystemName = "tr-TR",
                            IsActive = true,
                            Title = "Turkish"
                        },
                        new
                        {
                            SystemName = "ar-SA",
                            IsActive = true,
                            Title = "Arabic"
                        });
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.MarketCategory.Category", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<decimal?>("ParentId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("UniqueName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            Id = 1m,
                            CreateDate = new DateTime(2022, 12, 3, 9, 8, 17, 334, DateTimeKind.Local).AddTicks(5498),
                            IsDelete = false,
                            UniqueName = "Cosmetics"
                        },
                        new
                        {
                            Id = 2m,
                            CreateDate = new DateTime(2022, 12, 3, 9, 8, 17, 334, DateTimeKind.Local).AddTicks(5552),
                            IsDelete = false,
                            UniqueName = "Medical Equipment"
                        });
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.MarketCategory.CategoryInfo", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<decimal>("CategoryId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("LanguageId")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CategoryInfos");

                    b.HasData(
                        new
                        {
                            Id = 1m,
                            CategoryId = 1m,
                            CreateDate = new DateTime(2022, 12, 3, 9, 8, 17, 334, DateTimeKind.Local).AddTicks(5568),
                            IsDelete = false,
                            LanguageId = "fa-IR",
                            Title = "لوازم آرایشی بهداشتی"
                        },
                        new
                        {
                            Id = 2m,
                            CategoryId = 1m,
                            CreateDate = new DateTime(2022, 12, 3, 9, 8, 17, 334, DateTimeKind.Local).AddTicks(5609),
                            IsDelete = false,
                            LanguageId = "en-US",
                            Title = "Cosmetics"
                        },
                        new
                        {
                            Id = 3m,
                            CategoryId = 1m,
                            CreateDate = new DateTime(2022, 12, 3, 9, 8, 17, 334, DateTimeKind.Local).AddTicks(5620),
                            IsDelete = false,
                            LanguageId = "tr-TR",
                            Title = "Makyaj malzemeleri"
                        },
                        new
                        {
                            Id = 4m,
                            CategoryId = 1m,
                            CreateDate = new DateTime(2022, 12, 3, 9, 8, 17, 334, DateTimeKind.Local).AddTicks(5631),
                            IsDelete = false,
                            LanguageId = "ar-SA",
                            Title = "مستحضرات التجميل"
                        },
                        new
                        {
                            Id = 5m,
                            CategoryId = 2m,
                            CreateDate = new DateTime(2022, 12, 3, 9, 8, 17, 334, DateTimeKind.Local).AddTicks(5641),
                            IsDelete = false,
                            LanguageId = "ar-SA",
                            Title = "معدات طبية"
                        },
                        new
                        {
                            Id = 6m,
                            CategoryId = 2m,
                            CreateDate = new DateTime(2022, 12, 3, 9, 8, 17, 334, DateTimeKind.Local).AddTicks(5652),
                            IsDelete = false,
                            LanguageId = "tr-TR",
                            Title = "Tıbbi malzeme"
                        },
                        new
                        {
                            Id = 7m,
                            CategoryId = 2m,
                            CreateDate = new DateTime(2022, 12, 3, 9, 8, 17, 334, DateTimeKind.Local).AddTicks(5663),
                            IsDelete = false,
                            LanguageId = "en-US",
                            Title = "Medical Equipment"
                        },
                        new
                        {
                            Id = 8m,
                            CategoryId = 2m,
                            CreateDate = new DateTime(2022, 12, 3, 9, 8, 17, 334, DateTimeKind.Local).AddTicks(5673),
                            IsDelete = false,
                            LanguageId = "fa-IR",
                            Title = "تجهیزات پزشکی"
                        });
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.Notification.SupporterNotification", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHealthHouseRequest")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSeen")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTicket")
                        .HasColumnType("bit");

                    b.Property<decimal>("ReciverId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<int>("SupporterNotificationText")
                        .HasColumnType("int");

                    b.Property<decimal>("TargetId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("UserId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SupporterNotification");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.Nurse.Nurse", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<decimal>("UserId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Nurses");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.Nurse.NurseInfo", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Education")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("NurseId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("NurseId")
                        .IsUnique();

                    b.ToTable("NurseInfo");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.OnlineVisit.OnlineVisitRequestDetail", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("OnlineVisitRequestDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OnlineVisitRequestFile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OnlineVisitRequestType")
                        .HasColumnType("int");

                    b.Property<decimal>("RequestId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("RequestId")
                        .IsUnique();

                    b.ToTable("OnlineVisitRequestDetails");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.Organization.Organization", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("OrganizationInfoState")
                        .HasColumnType("int");

                    b.Property<int>("OrganizationType")
                        .HasColumnType("int");

                    b.Property<decimal>("OwnerId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("RejectDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.Organization.OrganizationMember", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<decimal>("OrganizationId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("UserId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("UserId");

                    b.ToTable("OrganizationMembers");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.Patient.Patient", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<int>("InsuranceType")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("PatientId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("PatientLastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("RequestId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("UserId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("RequestId");

                    b.HasIndex("UserId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.Pharmacy.HomePharmacyRequestDetail", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DrugCount")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("DrugImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DrugName")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("DrugPrescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DrugTrakingCode")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<decimal>("RequestId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("RequestId");

                    b.ToTable("HomePharmacyRequestDetails");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.Pharmacy.HomePharmacyRequestDetailPrice", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DrugNameFromPharmacy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("HomePharmacyRequestDetailId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<decimal>("SellerId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("HomePharmacyRequestDetailId");

                    b.HasIndex("SellerId");

                    b.ToTable("HomePharmacyRequestDetailPrices");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.Pharmacy.Pharmacy", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<decimal>("UserId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Pharmacies");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.Pharmacy.PharmacyInfo", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("NationalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PharmacyId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("PharmacyId")
                        .IsUnique();

                    b.ToTable("PharmacyInfos");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.Pharmacy.PharmacySelectedInterests", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("InterestId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<decimal>("PharmacyId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("InterestId");

                    b.HasIndex("PharmacyId");

                    b.ToTable("PharmacySelectedInterests");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.PopulationCovered.PopulationCovered", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDay")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<int>("InsuranceType")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientLastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Ratio")
                        .HasColumnType("int");

                    b.Property<decimal>("UserId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("PopulationCovered");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.Product.Product", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsInOffer")
                        .HasColumnType("bit");

                    b.Property<string>("LongDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OfferPercent")
                        .HasColumnType("int");

                    b.Property<string>("PackedProductsDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductImageName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ProductSaleType")
                        .HasColumnType("int");

                    b.Property<string>("ProductTitle")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ProductsCount")
                        .HasColumnType("int");

                    b.Property<int>("ProductsState")
                        .HasColumnType("int");

                    b.Property<string>("RejectedNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("UserId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.Product.ProductFeature", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FeatureTitle")
                        .IsRequired()
                        .HasMaxLength(800)
                        .HasColumnType("nvarchar(800)");

                    b.Property<string>("FeatureValue")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<decimal>("ProductID")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("ProductID");

                    b.ToTable("ProductFeatures");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.Product.ProductGallery", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<decimal>("ProductID")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(800)
                        .HasColumnType("nvarchar(800)");

                    b.HasKey("Id");

                    b.HasIndex("ProductID");

                    b.ToTable("ProductGalleries");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.Product.ProductSelectedCategory", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<decimal>("ProductCategoryId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("ProductID")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("ProductCategoryId");

                    b.HasIndex("ProductID");

                    b.ToTable("ProductSelectedCategories");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.Product.ProductsTags", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<decimal>("ProductId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("TagTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductsTags");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.Requests.HomeVisitRequestDetail", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<bool>("BloodPressureMeasurement")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("DermalOrSubcutaneousInjection")
                        .HasColumnType("bit");

                    b.Property<bool>("ECG")
                        .HasColumnType("bit");

                    b.Property<bool>("EmergencyVisit")
                        .HasColumnType("bit");

                    b.Property<bool>("FemalePhysician")
                        .HasColumnType("bit");

                    b.Property<bool>("GastricIntubation")
                        .HasColumnType("bit");

                    b.Property<bool>("Glucometry")
                        .HasColumnType("bit");

                    b.Property<bool>("GreatDressing")
                        .HasColumnType("bit");

                    b.Property<bool>("IntramuscularInjection")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("OxygenTherapy")
                        .HasColumnType("bit");

                    b.Property<bool>("PulseOximetry")
                        .HasColumnType("bit");

                    b.Property<bool>("ReedyInjection")
                        .HasColumnType("bit");

                    b.Property<decimal>("RequestId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool>("SerumTherapy")
                        .HasColumnType("bit");

                    b.Property<bool>("SmallDressing")
                        .HasColumnType("bit");

                    b.Property<bool>("UrinaryBladder")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("RequestId")
                        .IsUnique();

                    b.ToTable("HomeVisitRequestDetails");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.Requests.LogForDeclineHomeVisitRequestFromUser", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DoctorId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<decimal>("RequestId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("RequestId");

                    b.ToTable("LogForDeclineHomeVisitRequestFromUser");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.Requests.PaitientRequestDetail", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<decimal>("CityId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("CountryId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Distance")
                        .HasColumnType("int");

                    b.Property<string>("FullAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PatientId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("RequestId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("StateId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("Vilage")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("PatientId");

                    b.HasIndex("RequestId")
                        .IsUnique();

                    b.HasIndex("StateId");

                    b.ToTable("PaitientRequestDetails");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.Requests.PatientRequestDateTimeDetail", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EndTime")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<decimal>("RequestId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime>("SendDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StartTime")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RequestId")
                        .IsUnique();

                    b.ToTable("PatientRequestDateTimeDetails");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.Requests.RequestTransferingPriceFromOperator", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<decimal>("RequestId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("RequestId");

                    b.ToTable("TransferingPriceFromOperators");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.Resume.Resume", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("RejectedNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ResumeState")
                        .HasColumnType("int");

                    b.Property<decimal>("UserId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Resumes");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.SiteSetting.EmailSetting", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("EnableSsL")
                        .HasColumnType("bit");

                    b.Property<string>("From")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsDefaultEmail")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Port")
                        .HasColumnType("int");

                    b.Property<string>("Smtp")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("EmailSettings");

                    b.HasData(
                        new
                        {
                            Id = 1m,
                            CreateDate = new DateTime(2022, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "DoctorFAm",
                            EnableSsL = true,
                            From = "maghsoudlou.reza@gmail.com",
                            IsDefaultEmail = true,
                            IsDelete = false,
                            Password = "Reza@83040697",
                            Port = 587,
                            Smtp = "smtp.gmail.com",
                            UserName = "DoctorFAm"
                        });
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.States.Location", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("DeathCertificate")
                        .HasColumnType("bit");

                    b.Property<bool>("HomeLaboratory")
                        .HasColumnType("bit");

                    b.Property<bool>("HomeNurse")
                        .HasColumnType("bit");

                    b.Property<bool>("HomePatientTransport")
                        .HasColumnType("bit");

                    b.Property<bool>("HomePharmacy")
                        .HasColumnType("bit");

                    b.Property<bool>("HomeVisit")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<decimal?>("ParentId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("UniqueName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.States.LocationInfo", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("LanguageId")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("LocationId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("LocationId");

                    b.ToTable("LocationInfoes");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.Wallet.Wallet", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("GatewayType")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFinally")
                        .HasColumnType("bit");

                    b.Property<int>("PaymentType")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<decimal?>("RequestId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int");

                    b.Property<int>("TransactionWay")
                        .HasColumnType("int");

                    b.Property<decimal>("UserId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.Wallet.WalletData", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("GatewayType")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("ReferenceCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrackingCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("WalletId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("WalletId")
                        .IsUnique();

                    b.ToTable("WalletData");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.WorkAddress.WorkAddress", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("CityId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("CountryId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<decimal>("StateId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("UserId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("StateId");

                    b.HasIndex("UserId");

                    b.ToTable("WorkAddresses");
                });

            modelBuilder.Entity("DoctorFAM.DataLayer.Entities.Request", b =>
                {
                    b.HasOne("DoctorFAM.Domain.Entities.Account.User", "Operation")
                        .WithMany("OperationRequest")
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DoctorFAM.Domain.Entities.Account.User", "User")
                        .WithMany("Requests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Operation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.Account.Role", b =>
                {
                    b.HasOne("DoctorFAM.Domain.Entities.Account.Role", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.Account.RolePermission", b =>
                {
                    b.HasOne("DoctorFAM.Domain.Entities.Account.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.Account.UserRole", b =>
                {
                    b.HasOne("DoctorFAM.Domain.Entities.Account.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DoctorFAM.Domain.Entities.Account.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.BMI.BMI", b =>
                {
                    b.HasOne("DoctorFAM.Domain.Entities.Account.User", "User")
                        .WithMany("BMI")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.BMI.GFR", b =>
                {
                    b.HasOne("DoctorFAM.Domain.Entities.Account.User", "User")
                        .WithMany("GFR")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.Consultant.Consultant", b =>
                {
                    b.HasOne("DoctorFAM.Domain.Entities.Account.User", "User")
                        .WithOne("Consultant")
                        .HasForeignKey("DoctorFAM.Domain.Entities.Consultant.Consultant", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.Consultant.ConsultantInfo", b =>
                {
                    b.HasOne("DoctorFAM.Domain.Entities.Consultant.Consultant", "Consultant")
                        .WithOne("CounsultantInfo")
                        .HasForeignKey("DoctorFAM.Domain.Entities.Consultant.ConsultantInfo", "ConsultantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Consultant");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.Consultant.UserSelectedConsultant", b =>
                {
                    b.HasOne("DoctorFAM.Domain.Entities.Account.User", "Consultant")
                        .WithMany("UserConsultant")
                        .HasForeignKey("ConsultantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DoctorFAM.Domain.Entities.Account.User", "Patient")
                        .WithMany("PatientForConsultant")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Consultant");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.Contact.Ticket", b =>
                {
                    b.HasOne("DoctorFAM.Domain.Entities.Account.User", "Owner")
                        .WithMany("Tickets")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DoctorFAM.Domain.Entities.Account.User", "TargetUser")
                        .WithMany("TicketTargetUser")
                        .HasForeignKey("TargetUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("TargetUser");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.Contact.TicketMessage", b =>
                {
                    b.HasOne("DoctorFAM.Domain.Entities.Account.User", "Sender")
                        .WithMany("TicketMessages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DoctorFAM.Domain.Entities.Contact.Ticket", "Ticket")
                        .WithMany("TicketMessages")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Sender");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.DoctorReservation.DoctorPersonalBooking", b =>
                {
                    b.HasOne("DoctorFAM.Domain.Entities.DoctorReservation.DoctorReservationDateTime", "DoctorReservationDateTime")
                        .WithOne("DoctorPersonalBooking")
                        .HasForeignKey("DoctorFAM.Domain.Entities.DoctorReservation.DoctorPersonalBooking", "DoctorReservationDateTimeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DoctorReservationDateTime");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.DoctorReservation.DoctorReservationDate", b =>
                {
                    b.HasOne("DoctorFAM.Domain.Entities.Account.User", "User")
                        .WithMany("DoctorReservationDates")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.DoctorReservation.DoctorReservationDateTime", b =>
                {
                    b.HasOne("DoctorFAM.Domain.Entities.DoctorReservation.DoctorReservationDate", "DoctorReservationDate")
                        .WithMany("DoctorReservationDateTimes")
                        .HasForeignKey("DoctorReservationDateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DoctorFAM.Domain.Entities.Account.User", "User")
                        .WithMany("DoctorReservationDateTimes")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DoctorFAM.Domain.Entities.WorkAddress.WorkAddress", "WorkAddress")
                        .WithMany("DoctorReservationDateTimes")
                        .HasForeignKey("WorkAddressId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("DoctorReservationDate");

                    b.Navigation("User");

                    b.Navigation("WorkAddress");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.DoctorReservation.LogForCloseReservation", b =>
                {
                    b.HasOne("DoctorFAM.Domain.Entities.DoctorReservation.DoctorReservationDateTime", "DoctorReservationDateTime")
                        .WithMany("LogForCloseReservations")
                        .HasForeignKey("DoctorReservationDateTimeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DoctorFAM.Domain.Entities.Account.User", "User")
                        .WithMany("LogForCloseReservations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DoctorReservationDateTime");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.DoctorReservation.ReservationDateCancelation", b =>
                {
                    b.HasOne("DoctorFAM.Domain.Entities.DoctorReservation.DoctorReservationDate", "DoctorReservationDate")
                        .WithMany("ReservationDateCancelation")
                        .HasForeignKey("DoctorReservationDateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DoctorReservationDate");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.DoctorReservation.ReservationDateTimeCancelation", b =>
                {
                    b.HasOne("DoctorFAM.Domain.Entities.DoctorReservation.DoctorReservationDateTime", "DoctorReservationDateTime")
                        .WithOne("ReservationDateTimeCancelation")
                        .HasForeignKey("DoctorFAM.Domain.Entities.DoctorReservation.ReservationDateTimeCancelation", "DoctorReservationDateTimeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DoctorFAM.Domain.Entities.DoctorReservation.ReservationDateCancelation", "ReservationDateCancelation")
                        .WithMany("ReservationDateTimeCancelation")
                        .HasForeignKey("ReservationDateCancelationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DoctorReservationDateTime");

                    b.Navigation("ReservationDateCancelation");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.Doctors.Doctor", b =>
                {
                    b.HasOne("DoctorFAM.Domain.Entities.Account.User", "User")
                        .WithOne("Doctors")
                        .HasForeignKey("DoctorFAM.Domain.Entities.Doctors.Doctor", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.Doctors.DoctorsInfo", b =>
                {
                    b.HasOne("DoctorFAM.Domain.Entities.Doctors.Doctor", "Doctor")
                        .WithOne("DoctorsInfos")
                        .HasForeignKey("DoctorFAM.Domain.Entities.Doctors.DoctorsInfo", "DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.Doctors.DoctorsSelectedInterests", b =>
                {
                    b.HasOne("DoctorFAM.Domain.Entities.Doctors.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DoctorFAM.Domain.Entities.Interest.DoctorsInterest", "Interest")
                        .WithMany("DoctorsSelectedInterests")
                        .HasForeignKey("InterestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Interest");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.Doctors.DoctorsSkils", b =>
                {
                    b.HasOne("DoctorFAM.Domain.Entities.Doctors.Doctor", "Doctor")
                        .WithMany("DoctorsSkils")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.FamilyDoctor.ParsaSystem.UserInsertedFromParsaSystem", b =>
                {
                    b.HasOne("DoctorFAM.Domain.Entities.Account.User", "User")
                        .WithMany("UserInsertedFromParsaSystems")
                        .HasForeignKey("DoctorUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.FamilyDoctor.UserSelectedFamilyDoctor", b =>
                {
                    b.HasOne("DoctorFAM.Domain.Entities.Account.User", "Doctor")
                        .WithMany("FamilyDoctor")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DoctorFAM.Domain.Entities.Account.User", "Patient")
                        .WithMany("PatientForFamilyDoctor")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.FamilyDoctor.VIPSystem.LabelOfVIPDoctorInsertedPatient", b =>
                {
                    b.HasOne("DoctorFAM.Domain.Entities.FamilyDoctor.VIPSystem.DoctorsLabelsForVIPInsertedDoctor", "DoctorsLabelsForVIPInsertedDoctor")
                        .WithMany("LabelOfVIPDoctorInsertedPatient")
                        .HasForeignKey("DoctorsLabelsForVIPInsertedDoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DoctorFAM.Domain.Entities.FamilyDoctor.VIPSystem.VIPUserInsertedFromDoctorSystem", "VIPUserInsertedFromDoctorSystem")
                        .WithMany("LabelOfVIPDoctorInsertedPatient")
                        .HasForeignKey("VIPUserInsertedFromDoctorSystemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DoctorsLabelsForVIPInsertedDoctor");

                    b.Navigation("VIPUserInsertedFromDoctorSystem");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.HealthInformation.HealthInformation", b =>
                {
                    b.HasOne("DoctorFAM.Domain.Entities.Account.User", "User")
                        .WithMany("HealthInformation")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.HealthInformation.HealthInformationTag", b =>
                {
                    b.HasOne("DoctorFAM.Domain.Entities.HealthInformation.HealthInformation", "HealthInformation")
                        .WithMany("HealthInformationTags")
                        .HasForeignKey("HealthInformationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("HealthInformation");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.HealthInformation.RadioFAMCategory", b =>
                {
                    b.HasOne("DoctorFAM.Domain.Entities.HealthInformation.RadioFAMCategory", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.HealthInformation.RadioFAMCategoryInfo", b =>
                {
                    b.HasOne("DoctorFAM.Domain.Entities.Languages.Language", "Language")
                        .WithMany("RadioFAMCategoryInfos")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DoctorFAM.Domain.Entities.HealthInformation.RadioFAMCategory", "RadioFAMCategory")
                        .WithMany("RadioFAMCategoryInfos")
                        .HasForeignKey("RadioFAMCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("RadioFAMCategory");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.HealthInformation.RadioFAMSelectedCategory", b =>
                {
                    b.HasOne("DoctorFAM.Domain.Entities.HealthInformation.HealthInformation", "HealthInformation")
                        .WithMany("RadioFAMSelectedCategory")
                        .HasForeignKey("HealthInformationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DoctorFAM.Domain.Entities.HealthInformation.RadioFAMCategory", "RadioFAMCategory")
                        .WithMany("RadioFAMSelectedCategory")
                        .HasForeignKey("RadioFAMCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("HealthInformation");

                    b.Navigation("RadioFAMCategory");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.HealthInformation.TVFAMCategory", b =>
                {
                    b.HasOne("DoctorFAM.Domain.Entities.HealthInformation.TVFAMCategory", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.HealthInformation.TVFAMCategoryInfo", b =>
                {
                    b.HasOne("DoctorFAM.Domain.Entities.Languages.Language", "Language")
                        .WithMany("TVFAMCategoryInfo")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DoctorFAM.Domain.Entities.HealthInformation.TVFAMCategory", "TVFAMCategory")
                        .WithMany("TVFAMCategoryInfo")
                        .HasForeignKey("TVFAMCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("TVFAMCategory");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.HealthInformation.TVFAMSelectedCategory", b =>
                {
                    b.HasOne("DoctorFAM.Domain.Entities.HealthInformation.HealthInformation", "HealthInformation")
                        .WithMany("TVFAMSelectedCategory")
                        .HasForeignKey("HealthInformationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DoctorFAM.Domain.Entities.HealthInformation.TVFAMCategory", "TVFAMCategory")
                        .WithMany("TVFAMSelectedCategory")
                        .HasForeignKey("TVFAMCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("HealthInformation");

                    b.Navigation("TVFAMCategory");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.Interest.DoctorsInterestInfo", b =>
                {
                    b.HasOne("DoctorFAM.Domain.Entities.Interest.DoctorsInterest", "Interest")
                        .WithMany("InterestInfo")
                        .HasForeignKey("InterestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DoctorFAM.Domain.Entities.Languages.Language", "Language")
                        .WithMany("InterestInfos")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Interest");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.Interest.PharmacyInterestInfo", b =>
                {
                    b.HasOne("DoctorFAM.Domain.Entities.Interest.PharmacyInterests", "Interest")
                        .WithMany("InterestInfo")
                        .HasForeignKey("InterestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DoctorFAM.Domain.Entities.Languages.Language", "Language")
                        .WithMany("PharmacyInterests")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Interest");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.Laboratory.HomeLaboratoryRequestDetail", b =>
                {
                    b.HasOne("DoctorFAM.DataLayer.Entities.Request", "Request")
                        .WithMany()
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Request");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.Laboratory.Laboratory", b =>
                {
                    b.HasOne("DoctorFAM.Domain.Entities.Account.User", "User")
                        .WithOne("Laboratory")
                        .HasForeignKey("DoctorFAM.Domain.Entities.Laboratory.Laboratory", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.Laboratory.LaboratoryInfo", b =>
                {
                    b.HasOne("DoctorFAM.Domain.Entities.Laboratory.Laboratory", "Laboratory")
                        .WithOne("LaboratoryInfo")
                        .HasForeignKey("DoctorFAM.Domain.Entities.Laboratory.LaboratoryInfo", "LaboratoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Laboratory");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.MarketCategory.Category", b =>
                {
                    b.HasOne("DoctorFAM.Domain.Entities.MarketCategory.Category", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.MarketCategory.CategoryInfo", b =>
                {
                    b.HasOne("DoctorFAM.Domain.Entities.MarketCategory.Category", "Category")
                        .WithMany("CategoryInfo")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DoctorFAM.Domain.Entities.Languages.Language", "Language")
                        .WithMany("CategoryInfos")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.Notification.SupporterNotification", b =>
                {
                    b.HasOne("DoctorFAM.Domain.Entities.Account.User", "User")
                        .WithMany("SupporterNotifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.Nurse.Nurse", b =>
                {
                    b.HasOne("DoctorFAM.Domain.Entities.Account.User", "User")
                        .WithOne("Nurse")
                        .HasForeignKey("DoctorFAM.Domain.Entities.Nurse.Nurse", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.Nurse.NurseInfo", b =>
                {
                    b.HasOne("DoctorFAM.Domain.Entities.Nurse.Nurse", "Nurse")
                        .WithOne("NurseInfo")
                        .HasForeignKey("DoctorFAM.Domain.Entities.Nurse.NurseInfo", "NurseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Nurse");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.OnlineVisit.OnlineVisitRequestDetail", b =>
                {
                    b.HasOne("DoctorFAM.DataLayer.Entities.Request", "Request")
                        .WithOne("OnlineVisitRequestDetail")
                        .HasForeignKey("DoctorFAM.Domain.Entities.OnlineVisit.OnlineVisitRequestDetail", "RequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Request");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.Organization.Organization", b =>
                {
                    b.HasOne("DoctorFAM.Domain.Entities.Account.User", "User")
                        .WithMany("Organization")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.Organization.OrganizationMember", b =>
                {
                    b.HasOne("DoctorFAM.Domain.Entities.Organization.Organization", "Organization")
                        .WithMany("OrganizationMembers")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DoctorFAM.Domain.Entities.Account.User", "User")
                        .WithMany("OrganizationMembers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.Patient.Patient", b =>
                {
                    b.HasOne("DoctorFAM.DataLayer.Entities.Request", null)
                        .WithMany("Patient")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DoctorFAM.DataLayer.Entities.Request", "Request")
                        .WithMany()
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DoctorFAM.Domain.Entities.Account.User", "User")
                        .WithMany("Patients")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Request");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.Pharmacy.HomePharmacyRequestDetail", b =>
                {
                    b.HasOne("DoctorFAM.DataLayer.Entities.Request", "Request")
                        .WithMany("HomePharmacyRequestDetails")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Request");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.Pharmacy.HomePharmacyRequestDetailPrice", b =>
                {
                    b.HasOne("DoctorFAM.Domain.Entities.Pharmacy.HomePharmacyRequestDetail", "HomePharmacyRequestDetail")
                        .WithMany("HomePharmacyRequestDetailPrices")
                        .HasForeignKey("HomePharmacyRequestDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DoctorFAM.Domain.Entities.Account.User", "User")
                        .WithMany("HomePharmacyRequestDetailPrices")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("HomePharmacyRequestDetail");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.Pharmacy.Pharmacy", b =>
                {
                    b.HasOne("DoctorFAM.Domain.Entities.Account.User", "User")
                        .WithOne("Pharmacy")
                        .HasForeignKey("DoctorFAM.Domain.Entities.Pharmacy.Pharmacy", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.Pharmacy.PharmacyInfo", b =>
                {
                    b.HasOne("DoctorFAM.Domain.Entities.Pharmacy.Pharmacy", "Pharmacy")
                        .WithOne("PharmacyInfo")
                        .HasForeignKey("DoctorFAM.Domain.Entities.Pharmacy.PharmacyInfo", "PharmacyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Pharmacy");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.Pharmacy.PharmacySelectedInterests", b =>
                {
                    b.HasOne("DoctorFAM.Domain.Entities.Interest.PharmacyInterests", "Interest")
                        .WithMany("PharmacySelectedInterests")
                        .HasForeignKey("InterestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DoctorFAM.Domain.Entities.Pharmacy.Pharmacy", "Pharmacy")
                        .WithMany("PharmacySelectedInterests")
                        .HasForeignKey("PharmacyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Interest");

                    b.Navigation("Pharmacy");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.PopulationCovered.PopulationCovered", b =>
                {
                    b.HasOne("DoctorFAM.Domain.Entities.Account.User", "User")
                        .WithMany("PopulationCovered")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.Product.Product", b =>
                {
                    b.HasOne("DoctorFAM.Domain.Entities.Account.User", "Users")
                        .WithMany("Products")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.Product.ProductFeature", b =>
                {
                    b.HasOne("DoctorFAM.Domain.Entities.Product.Product", "Product")
                        .WithMany("ProductFeatures")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.Product.ProductGallery", b =>
                {
                    b.HasOne("DoctorFAM.Domain.Entities.Product.Product", "Product")
                        .WithMany("ProductGalleries")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.Product.ProductSelectedCategory", b =>
                {
                    b.HasOne("DoctorFAM.Domain.Entities.MarketCategory.Category", "ProductCategory")
                        .WithMany("ProductSelectedCategories")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DoctorFAM.Domain.Entities.Product.Product", "Product")
                        .WithMany("ProductSelectedCategories")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.Product.ProductsTags", b =>
                {
                    b.HasOne("DoctorFAM.Domain.Entities.Product.Product", "Product")
                        .WithMany("ProductsTags")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.Requests.HomeVisitRequestDetail", b =>
                {
                    b.HasOne("DoctorFAM.DataLayer.Entities.Request", "Request")
                        .WithOne("HomeVisitRequestDetail")
                        .HasForeignKey("DoctorFAM.Domain.Entities.Requests.HomeVisitRequestDetail", "RequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Request");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.Requests.LogForDeclineHomeVisitRequestFromUser", b =>
                {
                    b.HasOne("DoctorFAM.Domain.Entities.Account.User", "User")
                        .WithMany("LogForDeclineHomeVisitRequestFromUsers")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DoctorFAM.DataLayer.Entities.Request", "Request")
                        .WithMany("LogForDeclineHomeVisitRequestFromUsers")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Request");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.Requests.PaitientRequestDetail", b =>
                {
                    b.HasOne("DoctorFAM.Domain.Entities.States.Location", "City")
                        .WithMany("PaitientRequestDetailCities")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DoctorFAM.Domain.Entities.States.Location", "Country")
                        .WithMany("PaitientRequestDetailCountries")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DoctorFAM.Domain.Entities.Patient.Patient", "Patient")
                        .WithMany("PaitientRequestDetails")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DoctorFAM.DataLayer.Entities.Request", "Request")
                        .WithOne("PaitientRequestDetails")
                        .HasForeignKey("DoctorFAM.Domain.Entities.Requests.PaitientRequestDetail", "RequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DoctorFAM.Domain.Entities.States.Location", "State")
                        .WithMany("PaitientRequestDetailStates")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("Patient");

                    b.Navigation("Request");

                    b.Navigation("State");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.Requests.PatientRequestDateTimeDetail", b =>
                {
                    b.HasOne("DoctorFAM.DataLayer.Entities.Request", "Requests")
                        .WithOne("PatientRequestDateTimeDetails")
                        .HasForeignKey("DoctorFAM.Domain.Entities.Requests.PatientRequestDateTimeDetail", "RequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Requests");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.Requests.RequestTransferingPriceFromOperator", b =>
                {
                    b.HasOne("DoctorFAM.DataLayer.Entities.Request", "Request")
                        .WithMany("RequestTransferingPriceFromOperators")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Request");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.Resume.Resume", b =>
                {
                    b.HasOne("DoctorFAM.Domain.Entities.Account.User", "User")
                        .WithOne("Resume")
                        .HasForeignKey("DoctorFAM.Domain.Entities.Resume.Resume", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.States.Location", b =>
                {
                    b.HasOne("DoctorFAM.Domain.Entities.States.Location", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.States.LocationInfo", b =>
                {
                    b.HasOne("DoctorFAM.Domain.Entities.Languages.Language", "Language")
                        .WithMany("MyProperty")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DoctorFAM.Domain.Entities.States.Location", "Location")
                        .WithMany("LocationsInfo")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.Wallet.Wallet", b =>
                {
                    b.HasOne("DoctorFAM.Domain.Entities.Account.User", "User")
                        .WithMany("Wallets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.Wallet.WalletData", b =>
                {
                    b.HasOne("DoctorFAM.Domain.Entities.Wallet.Wallet", "Wallet")
                        .WithOne("WalletData")
                        .HasForeignKey("DoctorFAM.Domain.Entities.Wallet.WalletData", "WalletId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.WorkAddress.WorkAddress", b =>
                {
                    b.HasOne("DoctorFAM.Domain.Entities.States.Location", "City")
                        .WithMany("WorkAddressCities")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DoctorFAM.Domain.Entities.States.Location", "Country")
                        .WithMany("WorkAddressCountries")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DoctorFAM.Domain.Entities.States.Location", "State")
                        .WithMany("WorkAddressStates")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DoctorFAM.Domain.Entities.Account.User", "User")
                        .WithMany("WorkAddresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("State");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DoctorFAM.DataLayer.Entities.Request", b =>
                {
                    b.Navigation("HomePharmacyRequestDetails");

                    b.Navigation("HomeVisitRequestDetail")
                        .IsRequired();

                    b.Navigation("LogForDeclineHomeVisitRequestFromUsers");

                    b.Navigation("OnlineVisitRequestDetail")
                        .IsRequired();

                    b.Navigation("PaitientRequestDetails")
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("PatientRequestDateTimeDetails")
                        .IsRequired();

                    b.Navigation("RequestTransferingPriceFromOperators");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.Account.Role", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.Account.User", b =>
                {
                    b.Navigation("BMI");

                    b.Navigation("Consultant")
                        .IsRequired();

                    b.Navigation("DoctorReservationDateTimes");

                    b.Navigation("DoctorReservationDates");

                    b.Navigation("Doctors")
                        .IsRequired();

                    b.Navigation("FamilyDoctor");

                    b.Navigation("GFR");

                    b.Navigation("HealthInformation");

                    b.Navigation("HomePharmacyRequestDetailPrices");

                    b.Navigation("Laboratory")
                        .IsRequired();

                    b.Navigation("LogForCloseReservations");

                    b.Navigation("LogForDeclineHomeVisitRequestFromUsers");

                    b.Navigation("Nurse")
                        .IsRequired();

                    b.Navigation("OperationRequest");

                    b.Navigation("Organization");

                    b.Navigation("OrganizationMembers");

                    b.Navigation("PatientForConsultant");

                    b.Navigation("PatientForFamilyDoctor");

                    b.Navigation("Patients");

                    b.Navigation("Pharmacy")
                        .IsRequired();

                    b.Navigation("PopulationCovered");

                    b.Navigation("Products");

                    b.Navigation("Requests");

                    b.Navigation("Resume")
                        .IsRequired();

                    b.Navigation("SupporterNotifications");

                    b.Navigation("TicketMessages");

                    b.Navigation("TicketTargetUser");

                    b.Navigation("Tickets");

                    b.Navigation("UserConsultant");

                    b.Navigation("UserInsertedFromParsaSystems");

                    b.Navigation("UserRoles");

                    b.Navigation("Wallets");

                    b.Navigation("WorkAddresses");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.Consultant.Consultant", b =>
                {
                    b.Navigation("CounsultantInfo")
                        .IsRequired();
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.Contact.Ticket", b =>
                {
                    b.Navigation("TicketMessages");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.DoctorReservation.DoctorReservationDate", b =>
                {
                    b.Navigation("DoctorReservationDateTimes");

                    b.Navigation("ReservationDateCancelation");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.DoctorReservation.DoctorReservationDateTime", b =>
                {
                    b.Navigation("DoctorPersonalBooking")
                        .IsRequired();

                    b.Navigation("LogForCloseReservations");

                    b.Navigation("ReservationDateTimeCancelation")
                        .IsRequired();
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.DoctorReservation.ReservationDateCancelation", b =>
                {
                    b.Navigation("ReservationDateTimeCancelation");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.Doctors.Doctor", b =>
                {
                    b.Navigation("DoctorsInfos")
                        .IsRequired();

                    b.Navigation("DoctorsSkils");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.FamilyDoctor.VIPSystem.DoctorsLabelsForVIPInsertedDoctor", b =>
                {
                    b.Navigation("LabelOfVIPDoctorInsertedPatient");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.FamilyDoctor.VIPSystem.VIPUserInsertedFromDoctorSystem", b =>
                {
                    b.Navigation("LabelOfVIPDoctorInsertedPatient");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.HealthInformation.HealthInformation", b =>
                {
                    b.Navigation("HealthInformationTags");

                    b.Navigation("RadioFAMSelectedCategory");

                    b.Navigation("TVFAMSelectedCategory");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.HealthInformation.RadioFAMCategory", b =>
                {
                    b.Navigation("RadioFAMCategoryInfos");

                    b.Navigation("RadioFAMSelectedCategory");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.HealthInformation.TVFAMCategory", b =>
                {
                    b.Navigation("TVFAMCategoryInfo");

                    b.Navigation("TVFAMSelectedCategory");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.Interest.DoctorsInterest", b =>
                {
                    b.Navigation("DoctorsSelectedInterests");

                    b.Navigation("InterestInfo");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.Interest.PharmacyInterests", b =>
                {
                    b.Navigation("InterestInfo");

                    b.Navigation("PharmacySelectedInterests");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.Laboratory.Laboratory", b =>
                {
                    b.Navigation("LaboratoryInfo")
                        .IsRequired();
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.Languages.Language", b =>
                {
                    b.Navigation("CategoryInfos");

                    b.Navigation("InterestInfos");

                    b.Navigation("MyProperty");

                    b.Navigation("PharmacyInterests");

                    b.Navigation("RadioFAMCategoryInfos");

                    b.Navigation("TVFAMCategoryInfo");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.MarketCategory.Category", b =>
                {
                    b.Navigation("CategoryInfo");

                    b.Navigation("ProductSelectedCategories");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.Nurse.Nurse", b =>
                {
                    b.Navigation("NurseInfo")
                        .IsRequired();
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.Organization.Organization", b =>
                {
                    b.Navigation("OrganizationMembers");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.Patient.Patient", b =>
                {
                    b.Navigation("PaitientRequestDetails");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.Pharmacy.HomePharmacyRequestDetail", b =>
                {
                    b.Navigation("HomePharmacyRequestDetailPrices");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.Pharmacy.Pharmacy", b =>
                {
                    b.Navigation("PharmacyInfo")
                        .IsRequired();

                    b.Navigation("PharmacySelectedInterests");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.Product.Product", b =>
                {
                    b.Navigation("ProductFeatures");

                    b.Navigation("ProductGalleries");

                    b.Navigation("ProductSelectedCategories");

                    b.Navigation("ProductsTags");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.States.Location", b =>
                {
                    b.Navigation("LocationsInfo");

                    b.Navigation("PaitientRequestDetailCities");

                    b.Navigation("PaitientRequestDetailCountries");

                    b.Navigation("PaitientRequestDetailStates");

                    b.Navigation("WorkAddressCities");

                    b.Navigation("WorkAddressCountries");

                    b.Navigation("WorkAddressStates");
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.Wallet.Wallet", b =>
                {
                    b.Navigation("WalletData")
                        .IsRequired();
                });

            modelBuilder.Entity("DoctorFAM.Domain.Entities.WorkAddress.WorkAddress", b =>
                {
                    b.Navigation("DoctorReservationDateTimes");
                });
#pragma warning restore 612, 618
        }
    }
}
